// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Collections;

using UnityEngine;
using UnityEngine.UI;

using Random = UnityEngine.Random;

public class DelayToInvoke : MonoBehaviour
{

	public static IEnumerator DelayToInvokeDo (Action action, float delaySeconds)
	{

		yield return new WaitForSeconds (delaySeconds);

		action ();

	}
}

public class define : MonoBehaviour
{
	//	public GameManager _gameManager;
	//	public PlayerCore _playerCore;
	//	public PlayerCache _playerCache;

	static public bool isDebug = true;
	static protected bool _isScreenConfigInited = false;
	static protected Vector2 _screenSize = new Vector2 (1136, 640);
	static protected Vector2 _realScreenSize;
	static protected Vector2 _scaledScreenSize;
	static protected float _scaleFactor = 1.0f;
	static protected float _scaleFactorX = 1.0f;
	static protected float _scaleFactorY = 1.0f;
	static protected int _gameSceneMode = 1;
	static protected float _gameSceneModeTileThickness;
	static protected List<kNotificationKeys> _notificationsKey = new List<kNotificationKeys> ();
	static protected List<Action<Hashtable> > _notificationsCallBack = new List<Action<Hashtable> > ();
	static protected List<object> _notificationsDelegate = new List<object> ();
	//	static public int randomSeed = 0;

	public define ()
	{

	}

	protected GameManager _gameManager {
		get {
			return GameManager.instance;
		}
	}

	protected PlayerCore _playerCore {
		get {
			return GameManager.instance.playerCore;
		}
	}

	protected PlayerCache _playerCache {
		get {
			return GameManager.instance.playerCore.playerCache;
		}

	}

	protected EventManager _eventManager {
		get {
			return GameManager.instance.eventManager;
		}
	}

	//	protected GameScene _gameScene {
	//		get {
	//			return GameManager.instance.gameScene;
	//		}
	//		set{
	//			GameManager.instance.gameScene = value;
	//		}
	//	}

	//	public MaskLayer _maskLayer {
	//		get {
	//			return _gameManager.maskLayer;
	//		}
	//	}

	public object getObject (string name, string typestr)
	{
		return GameObject.Find (name).GetComponent (typestr);
	}

	public object getObject (string name, Type type)
	{
		return GameObject.Find (name).GetComponent (type);
	}

	public void goScene (Type scene)
	{
		_gameManager.lastScene.Add (GetType ());
		Application.LoadLevel (scene.ToString ());
	}

	public void goLastScene ()
	{
		int index = _gameManager.lastScene.Count - 1;
		Type last = _gameManager.lastScene [index];
		_gameManager.lastScene.RemoveAt (index);
		Application.LoadLevel (last.ToString ());
	}

	public Texture2D CaptureImage (Camera camera, Rect rect)
	{
		Texture2D captured = new Texture2D ((int)rect.width, (int)rect.height);
		camera.Render ();
		RenderTexture.active = camera.targetTexture;
		captured.ReadPixels (rect, 0, 0);
		captured.Apply ();
		RenderTexture.active = null;
		return captured;
	}

	public Sprite GetSpriteFromTexture (string fileName, string spriteName)
	{
		Sprite[] sprites = Resources.LoadAll<Sprite> (fileName);
		return System.Array.Find<Sprite> (sprites, (sprite) => sprite.name.Equals (spriteName));
	}

	public static string getTxtFile (string filepath)
	{
		Debug.Log ("Loading TXT-File:" + filepath);
		return ((TextAsset)Resources.Load (filepath)).text;
	}

	public static void SetImageTexture (GameObject obj, string file)
	{
		Image im = obj.GetComponent<Image> ();
		Texture2D tg = Resources.Load (file) as Texture2D;
		Rect rectg = new Rect (0, 0, tg.width, tg.height);
		Vector2 v2g = new Vector2 (0, 0);
		im.sprite = Sprite.Create (tg, rectg, v2g);
	}

	public static double getTimeStamp ()
	{
		var epochStart = new System.DateTime (1970, 1, 1, 8, 0, 0, System.DateTimeKind.Utc);
		return (System.DateTime.UtcNow - epochStart).TotalSeconds;
	}


	public static Vector2 getPositionInCanvas (Transform pObjectTransform, Canvas pParentCanvas)
	{
		Vector2 ret;
		RectTransformUtility.ScreenPointToLocalPointInRectangle (pParentCanvas.transform as RectTransform, pObjectTransform.position, pParentCanvas.GetComponent<Camera> (), out ret);
		return ret;
	}

	public static Vector2 getTouchPoint ()
	{
		Vector3 wp = Camera.main.ScreenToWorldPoint (Input.mousePosition);
		Vector2 ret = new Vector2 (wp.x, wp.y);

		return ret;
	}

	protected string LocalString (string key)
	{
		return "LocalString Func Not Defined :" + key;
	}

	protected void RemoveNotification (object pDelegate)
	{
		while (_notificationsDelegate.Contains (pDelegate)) {
			int index = 0;
			foreach (object obj in _notificationsDelegate) {
				if (obj == pDelegate) {
					_notificationsKey.RemoveAt (index);
					_notificationsCallBack.RemoveAt (index);
					_notificationsDelegate.RemoveAt (index);
					break;
				}
				index++;
			}
		}
	}

	static public void PostNotification (kNotificationKeys pKey)
	{
		PostNotification (pKey, null);
	}

	static public  void PostNotification (kNotificationKeys pKey, Hashtable pTable)
	{
		if (_notificationsKey.Contains (pKey)) {
			int index = 0;
			foreach (kNotificationKeys key in _notificationsKey) {
				if (key == pKey) {
					if (_notificationsDelegate [index] != null) {
						_notificationsCallBack [index] (pTable);
					}
				}
				index++;
			}
		}
	}

	protected void RegistNotification (object pDelegate, kNotificationKeys pKey, Action<Hashtable> pCallBack)
	{
		_notificationsKey.Add (pKey);
		_notificationsCallBack.Add (pCallBack);
		_notificationsDelegate.Add (pDelegate);
	}

	public int RandomInt (int min, int max, int seed = -1)
	{
//		return _gameManager.RandomInt (min, max, seed);
		int randomSeed = _gameManager.randomSeed;
		int ret = 0;
		if (seed == -1) {
			Random.seed = randomSeed;
			ret = Random.Range (min, max);
			randomSeed++;
		} else {
			Random.seed = seed;
			ret = Random.Range (min, max);
		}
		return ret;
	}

	public int RandomSeed ()
	{
		return RandomInt (0, 5000000);
	}

	public static T ParseEnum<T> (string value)
	{
		return (T)Enum.Parse (typeof(T), value, true);
	}

	void OnDestroy ()
	{
		RemoveNotification (this);
	}

	public void ScreenInfo ()
	{
		Debug.Log ("\n _realScreenSize:" + _realScreenSize
		+ "\n _scaledScreenSize:" + _scaledScreenSize
		+ "\n _scaleFactor:" + _scaleFactor
		+ "\n _scaleFactorX:" + _scaleFactorX
		+ "\n _scaleFactorY:" + _scaleFactorY);
	}


	public List<T> RandomSortList<T> (List<T> ListT)
	{  
		List<T> newList = new List<T> (); 

		foreach (T item in ListT) { 
			newList.Insert (RandomInt (0, newList.Count), item); 
		}  
		return newList;  
	}
}


